{"version":3,"sources":["config/config.tsx","services/api-service.tsx","slider.tsx","sort.tsx","grid-view.tsx","wrapper.tsx","cart-view.tsx","header-view.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["siteConfig","apiService","getCall","parameter","methodName","data","a","requestOptions","method","headers","body","JSON","stringify","fetch","apiURL","response","handleResponse","userData","text","then","parse","ok","status","window","location","reload","error","message","statusText","Promise","reject","HorizontalSliderComponent","props","handleChangeStart","console","log","handleChange","value","setState","handleChangeComplete","state","onChangeSliderValue","this","className","min","max","maxPrice","onChangeStart","onChange","onChangeComplete","React","Component","SortingComponent","totalItemCount","event","sortByOptions","target","href","data-toggle","title","data-original-title","icon","faTh","eventValue","sortByAndRefreshGrid","GridDetailsComponent","bind","Fragment","data-target","aria-expanded","faChevronDown","id","maxPriceRange","minPrice","minPriceRange","productList","map","items","index","key","src","img_url","alt","name","price","discount","onClick","addToCart","faShoppingBag","e","productID","updateCartitem","WrapperComponent","onChangeSliderValueFilter","cartitems","cartProducts","customClass","isVisible","loading","reservedProductList","product","length","reduce","p","sortByPriceASC","sortByPriceDESC","sortByNameDESC","sortByNameASC","prevState","sort","b","toLowerCase","filter","x","CartViewComponent","filterArray","arrayValue","myRef","createRef","getCartProduct","ModifyData","productcart","localStorage","getItem","undefined","Object","values","pid","qty","Math","round","disabled","totalPrice","discountedPrice","filtered","removeFromCart","result","resolve","d","productData","forEach","item","scope","style","width","category","type","ref","pattern","aria-live","aria-label","role","defaultValue","faTrash","GettotalCartPrice","oldproduct","arrayproduct","indexOf","splice","removeItem","setItem","preventDefault","stopPropagation","HeaderViewComponent","action","to","activeClassName","faShoppingCart","cartProduct","App","push","flat","path","exact","render","component","Boolean","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch"],"mappings":"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","file":"static/js/main.f766b18e.chunk.js","sourcesContent":["export enum siteConfig {\r\n  siteName = \"Shopping Portal\",\r\n  apiURL = \"https://api.myjson.com/bins/qzuzi\",\r\n}\r\n","import { siteConfig } from '../config/config';\r\n\r\nexport const apiService = {\r\n    getCall\r\n};\r\nasync function getCall(parameter: string, methodName: string, data?: any) {\r\n    const requestOptions = {\r\n        method: 'GET',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: data !== null ? JSON.stringify({ data }) : null,\r\n    };\r\n    const response =  parameter === '' ? await fetch(siteConfig.apiURL + methodName, requestOptions)\r\n        : await fetch(siteConfig.apiURL + methodName + \"?\" + parameter + \"= \" + data);\r\n    const userData = await handleResponse(response);\r\n    return userData;\r\n}\r\n\r\nfunction handleResponse(response: any) {\r\n    return response.text().then((text: string) => {\r\n        const data = text && JSON.parse(text);\r\n        if (!response.ok) {\r\n            if (response.status === 401) {\r\n                // auto logout if 401 response returned from api\r\n                 \r\n                window.location.reload(true);\r\n            }\r\n            const error = (data && data.message) || response.statusText;\r\n            return Promise.reject(error);\r\n        }\r\n        return data;\r\n    });\r\n}\r\n","import React from 'react'\r\nimport Slider from 'react-rangeslider';\r\n\r\ninterface SliderProps {\r\n    value: number;\r\n    maxPrice: number;\r\n    minPrice?: number;\r\n    onChangeSliderValue: Function;\r\n}\r\ninterface ISliderState {\r\n    value: number;\r\n}\r\n\r\nexport default class HorizontalSliderComponent extends React.Component<SliderProps, ISliderState> {\r\n    constructor(props: SliderProps) {\r\n        super(props)\r\n        this.state = {\r\n            value: props.value\r\n        }\r\n        console.log('state.value ', this.state.value);\r\n    }\r\n\r\n    handleChangeStart = () => {\r\n        console.log('Change event started')\r\n    };\r\n\r\n    handleChange = (value: number) => {\r\n        this.setState({\r\n            value: value\r\n        })\r\n    };\r\n\r\n    handleChangeComplete = () => {\r\n        console.log('Change event completed ', this.state.value);\r\n        this.props.onChangeSliderValue(this.state.value);\r\n    };\r\n\r\n    render() {\r\n        const { value } = this.state;\r\n        return (\r\n            <div className='slider custom-range'>\r\n                <Slider\r\n                    min={0}\r\n                    max={this.props.maxPrice}\r\n                    value={value}\r\n                    onChangeStart={this.handleChangeStart}\r\n                    onChange={this.handleChange}\r\n                    onChangeComplete={this.handleChangeComplete}\r\n                />\r\n                <div className='value'>{value}</div>\r\n            </div>\r\n        )\r\n    }\r\n}    \r\n","import React from 'react'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faTh } from '@fortawesome/free-solid-svg-icons';\r\n\r\ninterface ISortingProps {\r\n    totalItemCount?: number;\r\n    sortByAndRefreshGrid: Function;\r\n}\r\ninterface ISortingState {\r\n    value: number;\r\n}\r\n\r\nexport default class SortingComponent extends React.Component<ISortingProps, ISortingState> {\r\n    constructor(props: ISortingProps) {\r\n        super(props)\r\n        this.state = {\r\n            value: 0\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <header className=\"border-bottom mb-4 pb-3\">\r\n                <div className=\"form-inline\">\r\n                    <span className=\"mr-md-auto\">{this.props.totalItemCount} Items found </span>\r\n                    <select className=\"mr-2 form-control\" onChange={(event) => this.sortByOptions(event.target.value)}\r\n                    >\r\n                        <option value=\"PASC\">Relevance</option>\r\n                        <option value=\"PASC\">Price: Low to High</option>\r\n                        <option value=\"PDESC\">Price: High to Low</option>\r\n                        <option value=\"NASC\">Name: A to Z</option>\r\n                        <option value=\"NDESC\">Name: Z to A</option>\r\n                    </select>\r\n                    <div className=\"btn-group\">\r\n                        <a href=\"/#\" className=\"btn  btn-outline-secondary active\" data-toggle=\"tooltip\" title=\"\"\r\n                            data-original-title=\"Grid view\">\r\n                            <FontAwesomeIcon icon={faTh} className=\"fa fa-th\" />\r\n                        </a>\r\n                    </div>\r\n                </div>\r\n            </header>\r\n        )\r\n    }\r\n\r\n    private sortByOptions(eventValue: string): void {\r\n        this.props.sortByAndRefreshGrid(eventValue);\r\n    }\r\n}    \r\n","import React from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faShoppingBag, faChevronDown } from '@fortawesome/free-solid-svg-icons';\r\n\r\nimport HorizontalSliderComponent from './slider';\r\nimport SortingComponent from './sort';\r\n\r\ninterface IProductClass {\r\n    id: number;\r\n    name: string;\r\n    price: number;\r\n    discount: number;\r\n    category: string;\r\n    img_url: string;\r\n}\r\n\r\ninterface ICartProps {\r\n    isActive?: boolean;\r\n    cartProduct?: number;\r\n    updateCartitem: Function;\r\n    sortByAndRefreshGrid: Function;\r\n    productList: IProductClass[];\r\n    maxPriceRange: number;\r\n    minPriceRange: number;\r\n    onChangeSliderValue: Function;\r\n    totalItemCount?: number;\r\n}\r\n\r\nexport default class GridDetailsComponent extends React.Component<ICartProps, {}> {\r\n    public props: ICartProps;\r\n    constructor(props: ICartProps) {\r\n        super(props);\r\n        this.props = props;\r\n        this.sortByOptions = this.sortByOptions.bind(this);\r\n    }\r\n    private handleChangeComplete = (value: number) => {\r\n        console.log('Change event completed');\r\n        this.props.onChangeSliderValue(value);\r\n    };\r\n    render(): JSX.Element | null {\r\n        return (\r\n            <React.Fragment>\r\n                <section className=\"section-pagetop bg\">\r\n                    <div className=\"container\">\r\n                        <h2 className=\"title-page\">Category products</h2>\r\n                    </div>\r\n                </section>\r\n                <section className=\"section-content padding-y\">\r\n                    <div className=\"container\">\r\n                        <div className=\"row\">\r\n                            <aside className=\"col-md-3\">\r\n                                <div className=\"card\">\r\n                                    <article className=\"filter-group\">\r\n                                        <header className=\"card-header\">\r\n                                            <a href=\"/#\" data-toggle=\"collapse\" data-target=\"#collapse_3\" aria-expanded=\"true\" className=\"\">\r\n                                                <FontAwesomeIcon icon={faChevronDown} className=\"icon-control fa fa-chevron-down\" />\r\n                                                <h6 className=\"title\">Price range </h6>\r\n                                            </a>\r\n                                        </header>\r\n                                        <div className=\"filter-content collapse show\" id=\"collapse_3\" >\r\n                                            <div className=\"card-body\">\r\n                                                <HorizontalSliderComponent value={this.props.maxPriceRange} minPrice={this.props.minPriceRange}\r\n                                                    maxPrice={this.props.maxPriceRange} onChangeSliderValue={this.handleChangeComplete} />\r\n                                            </div>\r\n                                        </div>\r\n                                    </article>\r\n                                </div>\r\n                            </aside>\r\n                            <main className=\"col-md-9\">\r\n                                <SortingComponent totalItemCount={this.props.totalItemCount} sortByAndRefreshGrid={this.sortByOptions} />\r\n                                <div className=\"row\">\r\n                                    {this.props.productList !== null && this.props.productList.map((items: IProductClass, index: number) => {\r\n                                        return (\r\n                                            <div className=\"col-md-4\" key={index}>\r\n                                                <figure className=\"card card-product-grid\">\r\n                                                    <div className=\"img-wrap\">\r\n                                                        <img src={items.img_url} alt={items.name} />\r\n                                                    </div>\r\n                                                    <figcaption className=\"info-wrap\">\r\n                                                        <div className=\"fix-height\">\r\n                                                            <a href=\"/#\" className=\"title\">{items.name}</a>\r\n                                                            <div className=\"price-wrap mt-2\">\r\n                                                                <span className=\"price\">{items.price}</span>\r\n                                                                <del className=\"price-old\">{items.discount}</del>\r\n                                                            </div>\r\n                                                        </div>\r\n                                                        <a href=\"/#\" id={'addToCartID_' + items.id} onClick={() => this.addToCart(this, items.id)}\r\n                                                            className=\"btn btn-block btn-primary\">\r\n                                                            <FontAwesomeIcon icon={faShoppingBag} />\r\n                                                            Add to cart </a>\r\n                                                    </figcaption>\r\n                                                </figure>\r\n                                            </div>\r\n                                        );\r\n                                    })}\r\n                                </div>\r\n                            </main>\r\n                        </div>\r\n                    </div>\r\n                </section>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n\r\n    private addToCart(e: any, productID: number): void {\r\n        this.props.updateCartitem(productID);\r\n    }\r\n\r\n    private sortByOptions(eventValue: string): void {\r\n        this.props.sortByAndRefreshGrid(eventValue);\r\n    }\r\n\r\n}\r\n","import React from 'react';\r\nimport { apiService } from './services/api-service';\r\nimport GridDetailsComponent from './grid-view';\r\n\r\nimport './ui.scss';\r\nimport './responsivecart.scss';\r\nimport './all.min.scss';\r\nimport './wrapper.scss';\r\n\r\ninterface IWrapperProps {\r\n    updateCartitem: Function; \r\n}\r\n\r\ninterface IWrapperState {\r\n    cartitems: number;\r\n    totalItemCount?: number;\r\n    cartProducts: any;\r\n    minPriceRange: number;\r\n    maxPriceRange: number;\r\n    isVisible?: boolean;\r\n    isActive?: boolean;\r\n    productList: IProductClass[];\r\n    reservedProductList: IProductClass[];\r\n    customClass?: string;\r\n    loading?: boolean;\r\n    error?: string;\r\n}\r\n\r\ninterface IProductClass {\r\n    id: number;\r\n    name: string;\r\n    price: number;\r\n    discount: number;\r\n    category: string;\r\n    img_url: string;\r\n}\r\n\r\nexport default class WrapperComponent extends React.Component<IWrapperProps, IWrapperState> {\r\n    public props: IWrapperProps;\r\n    public state: IWrapperState;\r\n\r\n    constructor(props: IWrapperProps) {\r\n        super(props);\r\n        this.props = props;\r\n        this.updateCartitem = this.updateCartitem.bind(this);\r\n        this.sortByAndRefreshGrid = this.sortByAndRefreshGrid.bind(this);\r\n        this.onChangeSliderValueFilter = this.onChangeSliderValueFilter.bind(this);\r\n        this.state = {\r\n            cartitems: 0, cartProducts: [], minPriceRange: 0, maxPriceRange: 0, customClass: '',\r\n            isVisible: true, loading: true, error: '', productList: [], reservedProductList: []\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        apiService.getCall('', '', null)\r\n            .then(\r\n                (product) => {\r\n                    this.setState({\r\n                        productList: product,\r\n                        reservedProductList: product,\r\n                        totalItemCount: product.length,\r\n                        minPriceRange: product.reduce((min: number, p: any) => p.price < min ? p.price : min, product[0].price),\r\n                        maxPriceRange: product.reduce((max: number, p: any) => p.price > max ? p.price : max, product[0].price),\r\n                        loading: false,\r\n                        customClass: '',\r\n                        isVisible: true,\r\n                        error: '',\r\n                    });\r\n                },\r\n                (error) => {\r\n                    this.setState({ error, loading: false });\r\n                },\r\n            );\r\n    }\r\n\r\n    private updateCartitem(productID: number) {\r\n        console.log(\"clicked\", productID);\r\n        this.props.updateCartitem(productID);\r\n    }\r\n\r\n    private sortByAndRefreshGrid(eventValue: string) { \r\n        switch (eventValue) {  \r\n            case \"PASC\":\r\n                this.sortByPriceASC();\r\n            break; \r\n            case \"PDESC\":\r\n                this.sortByPriceDESC();\r\n                break;\r\n            case \"NDESC\":\r\n                    this.sortByNameDESC();\r\n                break;      \r\n            case \"NASC\":\r\n                    this.sortByNameASC();\r\n                    break;  \r\n            default:\r\n                break;\r\n        }\r\n    }    \r\n \r\n    private sortByNameASC() : void {\r\n        this.setState((prevState: IWrapperState) => ({\r\n            productList: prevState.productList.sort(function(a, b) {\r\n                if(a.name.toLowerCase() < b.name.toLowerCase()) return -1;\r\n                if(a.name.toLowerCase() > b.name.toLowerCase()) return 1;\r\n                return 0;\r\n               })\r\n        }));\r\n    }\r\n    private sortByNameDESC() : void {\r\n        this.setState((prevState: IWrapperState) => ({\r\n            productList: prevState.productList.sort(function(a, b) {\r\n                if(a.name.toLowerCase() > b.name.toLowerCase()) return -1;\r\n                if(a.name.toLowerCase() < b.name.toLowerCase()) return 1;\r\n                return 0;\r\n               })\r\n        }));\r\n    }\r\n    private sortByPriceASC() : void {\r\n        this.setState((prevState: IWrapperState) => ({\r\n            productList: prevState.productList.sort((a, b) => (a.price - b.price))\r\n        }));\r\n    }\r\n\r\n    private sortByPriceDESC() : void {\r\n        this.setState((prevState: IWrapperState) => ({\r\n            productList: prevState.productList.sort((a, b) => (b.price - a.price))\r\n        }));\r\n    }\r\n\r\n    private onChangeSliderValueFilter(value: number) {\r\n        this.state.productList = this.state.reservedProductList;\r\n        this.setState((prevState: IWrapperState) => ({\r\n            productList: prevState.productList.filter(x => x.price <= value)\r\n        }));\r\n    }\r\n\r\n    render(): JSX.Element | null {\r\n        return (\r\n            <div className=\"wrapper\">\r\n                <GridDetailsComponent productList={this.state.productList} totalItemCount={this.state.totalItemCount}\r\n                    updateCartitem={this.updateCartitem} minPriceRange={this.state.minPriceRange}\r\n                    maxPriceRange={this.state.maxPriceRange} onChangeSliderValue={this.onChangeSliderValueFilter} \r\n                    sortByAndRefreshGrid={this.sortByAndRefreshGrid}\r\n                    />\r\n            </div>\r\n        );\r\n    }\r\n}","import React from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faTrash } from '@fortawesome/free-solid-svg-icons';\r\nimport { apiService } from './services/api-service';\r\n\r\ninterface IProductClass {\r\n    id: number;\r\n    name: string;\r\n    price: number;\r\n    discount: number;\r\n    category: string;\r\n    img_url: string;\r\n    qty?: number;\r\n}\r\n\r\ninterface ICartProps {\r\n    value: number;\r\n}\r\n\r\ninterface ICartState {\r\n    value: number;\r\n    filtered: any;\r\n    disabled: boolean;\r\n    productList: IProductClass[];\r\n    error?: string;\r\n    totalPrice: number;\r\n    discountedPrice?: number;\r\n}\r\n\r\nexport default class CartViewComponent extends React.Component<ICartProps, ICartState> {\r\n    public filterArray: any;\r\n    public props: ICartProps;\r\n    public arrayValue: any = [];\r\n    private myRef: React.RefObject<HTMLInputElement> = React.createRef<HTMLInputElement>();\r\n\r\n    constructor(props: ICartProps) {\r\n        super(props);\r\n        this.props = props;\r\n        this.state = {\r\n            value: 0,\r\n            disabled: true,\r\n            productList: [],\r\n            error: '',\r\n            totalPrice: 0,\r\n            discountedPrice: 0,\r\n            filtered: []\r\n        }\r\n        this.removeFromCart = this.removeFromCart.bind(this);\r\n    }\r\n\r\n    async componentDidMount() {\r\n        this.arrayValue = localStorage.getItem('cartProducts');\r\n\r\n        if (this.arrayValue == null) {\r\n            return false;\r\n        }\r\n        var data = apiService.getCall('', '', null).then(function (result) {\r\n            return Promise.resolve(result);\r\n        });\r\n        data.then((d: any) => {\r\n            let productData: any = [];\r\n            d.forEach(function (items: any) {\r\n                productData[items.id] = items;\r\n            });\r\n            this.setState({\r\n                productList: productData\r\n            })\r\n        });\r\n    }\r\n\r\n    getCartProduct = () => {\r\n        let productcart: any = [];\r\n        let ModifyData: any;\r\n\r\n        localStorage.getItem('cartProducts') !== null && localStorage.getItem('cartProducts') !== undefined\r\n            && Object.values(JSON.parse(localStorage.getItem('cartProducts')!)).map((pid: any) => {\r\n\r\n                if (productcart[pid] !== undefined) {\r\n                    ModifyData = {\r\n                        qty: Math.round(productcart[pid].qty) + 1,\r\n                        ...this.state.productList[pid]\r\n                    };\r\n\r\n                } else {\r\n                    ModifyData = {\r\n                        qty: 1,\r\n                        ...this.state.productList[pid]\r\n                    };\r\n                }\r\n                productcart[pid] = ModifyData;\r\n            });\r\n        return productcart;\r\n    }\r\n\r\n    private GettotalCartPrice() {\r\n        let totalPrice: any = 0;\r\n\r\n        this.getCartProduct().forEach((item: any) => {\r\n\r\n            totalPrice = totalPrice + Math.round(item.qty * item.price);\r\n        })\r\n        return totalPrice;\r\n    }\r\n\r\n    render(): JSX.Element | null {\r\n        return (\r\n            <React.Fragment>\r\n                <section className=\"section-pagetop bg\">\r\n                    <div className=\"container\">\r\n                        <h2 className=\"title-page\">Shopping cart</h2>\r\n                    </div>\r\n                </section>\r\n                <section className=\"section-content padding-y\">\r\n                    <div className=\"container\">\r\n                        <div className=\"row\">\r\n                            <main className=\"col-md-9\">\r\n                                <div className=\"card\">\r\n                                    <table className=\"table table-borderless table-shopping-cart\">\r\n                                        <thead className=\"text-muted\">\r\n                                            <tr className=\"small text-uppercase\">\r\n                                                <th scope=\"col\">Product</th>\r\n                                                <th scope=\"col\" style={{ width: '120' }}>Quantity</th>\r\n                                                <th scope=\"col\" style={{ width: '120' }}>Price</th>\r\n                                                <th scope=\"col\" className=\"text-right\" style={{ width: '120' }}> </th>\r\n                                            </tr>\r\n                                        </thead>\r\n                                        <tbody>\r\n                                            {\r\n                                                this.getCartProduct() !== null && this.getCartProduct().map((items: IProductClass, index: number) => {\r\n                                                    return (\r\n                                                        <tr key={index}>\r\n                                                            <td>\r\n                                                                <figure className=\"itemside\">\r\n                                                                    <div className=\"aside\">\r\n                                                                        <img src={items.img_url} alt={items.name} className=\"img-sm\" />\r\n                                                                    </div>\r\n                                                                    <figcaption className=\"info\">\r\n                                                                        <a href=\"/#\" className=\"title text-dark\">\r\n                                                                            {items.name}</a>\r\n                                                                        <p className=\"text-muted small\">Category: {items.category}\r\n                                                                        </p>\r\n                                                                    </figcaption>\r\n                                                                </figure>\r\n                                                            </td>\r\n                                                            <td>                                                                <div className=\"msc-cart-line__product-quantity\">\r\n                                                                <div className=\"msc-cart-line__product-quantity-label\">Quantity</div>\r\n                                                                <div className=\"quantity\" id={\"msc-cart-line__quantity_\" + items.id}>\r\n                                                                    {/* <button key={'keyd_ ' + items.id}  className=\"decrement quantity__controls \" id={\"decrementQuantity_\" + items.id}\r\n                                                                        onClick={() => { this.decrementCounter(this) }}\r\n                                                                        disabled={this.state.disabled}\r\n\r\n                                                                        aria-hidden=\"true\" tabIndex={-1} color=\"secondary\">\r\n                                                                        <FontAwesomeIcon icon={faMinus} className=\"fa fa-minus\" />\r\n                                                                    </button> */}\r\n                                                                    <input type=\"number\" id={'idddd_ ' + items.id} key={'idddd_ ' + items.id} ref={this.myRef} className=\"quantity-input\" pattern=\"[0-9]*\" aria-live=\"polite\" aria-label=\"quantity input\"\r\n                                                                        role=\"spinbutton\" defaultValue={items.qty}\r\n                                                                        onChange={(e: any) => this.handleChange(items.id, e)}\r\n                                                                    />\r\n                                                                    {/* <button key={'keyi_ ' + items.id}  className=\"increment quantity__controls \" id={\"incrementQuantity_\" + items.id}\r\n                                                                        onClick={() => { this.incrementCounter(this,this.myRef) }}\r\n\r\n                                                                        aria-hidden=\"true\" tabIndex={-1} color=\"secondary\">\r\n                                                                        <FontAwesomeIcon icon={faPlus} className=\"fa fa-plus\" />\r\n                                                                    </button> */}\r\n                                                                </div>\r\n                                                            </div>\r\n                                                            </td>\r\n                                                            <td>\r\n                                                                <div className=\"price-wrap\">\r\n                                                                    <var className=\"price\">{Math.round(items.price * items.qty!)}</var>\r\n                                                                    {/* <small className=\"text-muted\"> $315.20 each </small> */}\r\n                                                                </div>\r\n                                                            </td>\r\n                                                            <td className=\"text-right\">\r\n                                                                <a href=\"/cart\" className=\"btn btn-light\" onClick={() => this.removeFromCart(this, items.id)}>\r\n                                                                    <FontAwesomeIcon icon={faTrash} className=\"fa fa-trash\" />\r\n                                                                </a>\r\n                                                            </td>\r\n                                                        </tr>\r\n                                                    );\r\n                                                })}\r\n                                        </tbody>\r\n                                    </table>                                   \r\n                                </div>\r\n                            </main>\r\n                            <aside className=\"col-md-3\">\r\n                                <div className=\"card\">\r\n                                    <div className=\"card-body\">\r\n                                        <dl className=\"dlist-align\">\r\n                                            <dt>Total price:</dt>\r\n                                            <dd className=\"text-right\"> {this.GettotalCartPrice()}</dd>\r\n                                        </dl>\r\n                                        <dl className=\"dlist-align\">\r\n                                            <dt>Discount:</dt>\r\n                                            <dd className=\"text-right\">{this.state.discountedPrice}</dd>\r\n                                        </dl>\r\n                                        <hr />\r\n                                        <dl className=\"dlist-align\">\r\n                                            <dt>Total:</dt>\r\n                                            <dd className=\"text-right  h5\"><strong>{this.GettotalCartPrice()}</strong></dd>\r\n                                        </dl>\r\n                                    </div>\r\n                                </div>\r\n                            </aside>\r\n                        </div>\r\n                    </div>\r\n                </section>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n\r\n    private removeFromCart(e: any, productID: number): void {\r\n        let oldproduct: any = [];\r\n        oldproduct = localStorage.getItem('cartProducts') ? localStorage.getItem('cartProducts') : \"[]\";\r\n        let arrayproduct = JSON.parse(oldproduct);\r\n        const index = arrayproduct.indexOf(productID);\r\n        if (index > -1) {\r\n            arrayproduct.splice(index, 1);\r\n        }\r\n        localStorage.removeItem('cartProducts');\r\n        localStorage.setItem('cartProducts', JSON.stringify(arrayproduct));\r\n        e.preventDefault();\r\n        e.stopPropagation();\r\n    }\r\n\r\n    private handleChange = (pid: number, e: any) => {\r\n        let productcart: any = [];\r\n        productcart = this.getCartProduct();\r\n        productcart[pid] = {\r\n            qty: Math.round(e.target.value),\r\n            ...this.state.productList[pid]\r\n        };\r\n        return productcart;\r\n    };\r\n\r\n    // incrementCounter(e: any,ref:any) { \r\n    //     // this.setState({\r\n    //     //     value: this.state.value + 1, disabled: false\r\n    //     // });\r\n\r\n    //     ref.current!.value = '5';\r\n    // }\r\n\r\n    // decrementCounter(e: any) {\r\n    //     if (this.state.value <= 0) {\r\n    //         return;\r\n    //     };\r\n    //     this.setState({\r\n    //         value: this.state.value - 1\r\n    //     });\r\n    //     if (this.state.value - 1 <= 0) {\r\n    //         this.setState({\r\n    //             disabled: true\r\n    //         });\r\n    //     }\r\n    // }\r\n}\r\n","import React from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faShoppingCart } from '@fortawesome/free-solid-svg-icons';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\ninterface IHeaderProps {\r\n    cartProduct?: number;  \r\n}\r\n\r\nexport default class HeaderViewComponent extends React.Component<IHeaderProps, {}> {\r\n    public props: IHeaderProps;\r\n    constructor(props: IHeaderProps) {\r\n        super(props);\r\n        this.props = props;\r\n    }\r\n\r\n    public render(): JSX.Element | null {\r\n\r\n        return (\r\n            <div className=\"container\">\r\n            <div className=\"row align-items-center\">\r\n               <div className=\"col-lg-2 col-4\">\r\n                  <a href=\"/cart-application-adobe\" className=\"brand-wrap\">\r\n                  <img className=\"logo\" alt=\"logo\" src=\"../assets/images/logo/staricon.png\" />\r\n                  </a>\r\n               </div>\r\n                <div className=\"col-lg-6 col-sm-12\">\r\n                  <form action=\"#\" className=\"search\">\r\n                     <div className=\"input-group w-100\">                         \r\n                        <div className=\"input-group-append\">                         \r\n                        </div>\r\n                     </div>\r\n                  </form>\r\n               </div>  \r\n               <div className=\"col-lg-4 col-sm-6 col-12\">\r\n                  <div className=\"widgets-wrap float-md-right\">\r\n                     <div className=\"widget-header  mr-3\">\r\n                        <NavLink to='/cart' className=\"nav-link icon icon-sm rounded-circle border\"\r\n                           activeClassName='active'>\r\n                           <FontAwesomeIcon icon={faShoppingCart} className=\"fa fa-shopping-cart\" />\r\n                        </NavLink>\r\n                        <span className=\"badge badge-pill badge-danger notify\">{this.props.cartProduct}</span>\r\n                     </div>\r\n                  </div>\r\n               </div>\r\n            </div>\r\n         </div>\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\r\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\r\nimport 'bootstrap/scss/bootstrap.scss';\r\nimport './App.scss';\r\nimport WrapperComponent from './wrapper';\r\nimport CartViewComponent from './cart-view';\r\nimport HeaderViewComponent from './header-view';\r\n\r\ninterface IAppProps {\r\n    isAdded?: number;\r\n}\r\ninterface IAppState {\r\n    cartitems: number;\r\n    cartProducts: any;\r\n}\r\n\r\nclass App extends React.Component<IAppProps, IAppState> {\r\n\r\n    public props: IAppProps;\r\n    public state: IAppState;\r\n\r\n    constructor(props: IAppProps) {\r\n        super(props);\r\n        this.props = props;\r\n        this.state = {\r\n            cartitems: 0, cartProducts: []\r\n        };\r\n        this.updateCartitem = this.updateCartitem.bind(this);\r\n    }\r\n\r\n    private updateCartitem(productID: number) {\r\n        let oldproduct: any = [];\r\n        oldproduct = localStorage.getItem('cartProducts') ? localStorage.getItem('cartProducts') : \"[]\";\r\n        let arrayproduct = JSON.parse(oldproduct);\r\n\r\n        arrayproduct.push(productID);\r\n        localStorage.setItem('cartProducts', JSON.stringify(arrayproduct));\r\n\r\n        this.setState((prevState: IAppState) => ({\r\n            cartitems: prevState.cartitems + 1,\r\n            cartProducts: arrayproduct\r\n        }));\r\n    }\r\n\r\n    public render(): JSX.Element {\r\n        return (\r\n            <BrowserRouter>\r\n                <div className=\"App\">\r\n                    <header className=\"section-header\">\r\n                        <section className=\"header-main border-bottom\">\r\n                            <HeaderViewComponent\r\n                                cartProduct={(localStorage.getItem('cartProducts') !== null && localStorage.getItem('cartProducts') !== undefined) ? Object.values(JSON.parse(localStorage.getItem('cartProducts')!)).flat().length : 0} />\r\n                        </section>\r\n                    </header>\r\n                    <Switch>\r\n                        <Route path='/' exact={true} render={() => <WrapperComponent updateCartitem={this.updateCartitem} />} />\r\n                        <Route path='/cart-application-adobe' exact={true} render={() => <WrapperComponent updateCartitem={this.updateCartitem} />} />\r\n                        <Route path='/cart' exact={true} component={CartViewComponent} />\r\n                    </Switch>\r\n                </div>\r\n            </BrowserRouter>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.scss';\r\n\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}